// <auto-generated />
using System;
using BC7.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BC7.Database.Migrations
{
    [DbContext(typeof(BitClub7Context))]
    [Migration("20190502090115_InitialDatabaseAndSeed")]
    partial class InitialDatabaseAndSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BC7.Domain.MatrixPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("DepthLevel");

                    b.Property<int>("Left");

                    b.Property<int>("MatrixLevel");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("Right");

                    b.Property<Guid?>("UserMultiAccountId");

                    b.HasKey("Id");

                    b.HasIndex("UserMultiAccountId");

                    b.ToTable("MatrixPositions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1eae29d-8fa4-4a8d-bfb6-e565951d3a12"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(8842),
                            DepthLevel = 0,
                            Left = 1,
                            MatrixLevel = 0,
                            Right = 14,
                            UserMultiAccountId = new Guid("a922136f-dc35-4f1c-aeb4-ace266614f46")
                        },
                        new
                        {
                            Id = new Guid("6376eb00-cde1-4cc6-bfb9-ac9a6c810a34"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(9717),
                            DepthLevel = 1,
                            Left = 2,
                            MatrixLevel = 0,
                            ParentId = new Guid("f1eae29d-8fa4-4a8d-bfb6-e565951d3a12"),
                            Right = 7,
                            UserMultiAccountId = new Guid("8e9d0086-1564-4fc1-9e4f-921355aa90e9")
                        },
                        new
                        {
                            Id = new Guid("eb30aa94-e9fb-40ca-af04-72a0a952ab05"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(9811),
                            DepthLevel = 1,
                            Left = 8,
                            MatrixLevel = 0,
                            ParentId = new Guid("f1eae29d-8fa4-4a8d-bfb6-e565951d3a12"),
                            Right = 13,
                            UserMultiAccountId = new Guid("976cd947-5911-42e7-9b96-18a699fa0241")
                        },
                        new
                        {
                            Id = new Guid("ec737a2c-36a9-40d8-a2d7-7f6208a2d42b"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(9822),
                            DepthLevel = 2,
                            Left = 3,
                            MatrixLevel = 0,
                            ParentId = new Guid("6376eb00-cde1-4cc6-bfb9-ac9a6c810a34"),
                            Right = 4
                        },
                        new
                        {
                            Id = new Guid("22df768d-29a0-4624-b02e-199d928325ac"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(9822),
                            DepthLevel = 2,
                            Left = 5,
                            MatrixLevel = 0,
                            ParentId = new Guid("6376eb00-cde1-4cc6-bfb9-ac9a6c810a34"),
                            Right = 6
                        },
                        new
                        {
                            Id = new Guid("6589418f-225d-4039-bd4d-c7602a887ab0"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(9825),
                            DepthLevel = 2,
                            Left = 9,
                            MatrixLevel = 0,
                            ParentId = new Guid("eb30aa94-e9fb-40ca-af04-72a0a952ab05"),
                            Right = 10
                        },
                        new
                        {
                            Id = new Guid("cca19321-a65f-4fb1-8409-3e5d7c378cf1"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(9825),
                            DepthLevel = 2,
                            Left = 11,
                            MatrixLevel = 0,
                            ParentId = new Guid("eb30aa94-e9fb-40ca-af04-72a0a952ab05"),
                            Right = 12
                        });
                });

            modelBuilder.Entity("BC7.Domain.PaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountToPay");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("PaidAmount");

                    b.Property<string>("PaymentFor")
                        .IsRequired();

                    b.Property<Guid>("PaymentId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("BC7.Domain.UserAccountData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BtcWalletAddress")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Hash")
                        .IsRequired();

                    b.Property<bool>("IsMembershipFeePaid");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("UserAccountsData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc7b7925-207f-4357-9642-e97ad59eff63"),
                            BtcWalletAddress = "BtcWalletAddressRoot1",
                            City = "CityRoot1",
                            Country = "CountryRoot1",
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 827, DateTimeKind.Utc).AddTicks(3646),
                            Email = "EmailRoot1",
                            FirstName = "FirstNameRoot1",
                            Hash = "hash1",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot1",
                            Login = "LoginRoot1",
                            Role = "Root",
                            Salt = "salt1",
                            Street = "StreetRoot1",
                            ZipCode = "ZipCodeRoot1"
                        },
                        new
                        {
                            Id = new Guid("609dc926-7f81-4926-95fc-20a5f2bb75c7"),
                            BtcWalletAddress = "BtcWalletAddressRoot2",
                            City = "CityRoot2",
                            Country = "CountryRoot2",
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 827, DateTimeKind.Utc).AddTicks(4825),
                            Email = "EmailRoot2",
                            FirstName = "FirstNameRoot2",
                            Hash = "hash2",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot2",
                            Login = "LoginRoot2",
                            Role = "Root",
                            Salt = "salt2",
                            Street = "StreetRoot2",
                            ZipCode = "ZipCodeRoot2"
                        },
                        new
                        {
                            Id = new Guid("0185817d-771a-40d8-b4fd-f18ea7a1fe44"),
                            BtcWalletAddress = "BtcWalletAddressRoot3",
                            City = "CityRoot3",
                            Country = "CountryRoot3",
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 827, DateTimeKind.Utc).AddTicks(4837),
                            Email = "EmailRoot3",
                            FirstName = "FirstNameRoot3",
                            Hash = "hash3",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot3",
                            Login = "LoginRoot3",
                            Role = "Root",
                            Salt = "salt3",
                            Street = "StreetRoot3",
                            ZipCode = "ZipCodeRoot3"
                        });
                });

            modelBuilder.Entity("BC7.Domain.UserMultiAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsMainAccount");

                    b.Property<string>("MultiAccountName");

                    b.Property<string>("RefLink");

                    b.Property<Guid?>("SponsorId");

                    b.Property<Guid>("UserAccountDataId");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UserAccountDataId");

                    b.ToTable("UserMultiAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a922136f-dc35-4f1c-aeb4-ace266614f46"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 828, DateTimeKind.Utc).AddTicks(6074),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot1",
                            RefLink = "111111",
                            UserAccountDataId = new Guid("dc7b7925-207f-4357-9642-e97ad59eff63")
                        },
                        new
                        {
                            Id = new Guid("8e9d0086-1564-4fc1-9e4f-921355aa90e9"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(1867),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot2",
                            RefLink = "222222",
                            UserAccountDataId = new Guid("609dc926-7f81-4926-95fc-20a5f2bb75c7")
                        },
                        new
                        {
                            Id = new Guid("976cd947-5911-42e7-9b96-18a699fa0241"),
                            CreatedAt = new DateTime(2019, 5, 2, 9, 1, 14, 829, DateTimeKind.Utc).AddTicks(1887),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot3",
                            RefLink = "333333",
                            UserAccountDataId = new Guid("0185817d-771a-40d8-b4fd-f18ea7a1fe44")
                        });
                });

            modelBuilder.Entity("BC7.Domain.MatrixPosition", b =>
                {
                    b.HasOne("BC7.Domain.UserMultiAccount")
                        .WithMany("MatrixPositions")
                        .HasForeignKey("UserMultiAccountId");
                });

            modelBuilder.Entity("BC7.Domain.UserMultiAccount", b =>
                {
                    b.HasOne("BC7.Domain.UserMultiAccount", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId");

                    b.HasOne("BC7.Domain.UserAccountData", "UserAccountData")
                        .WithMany("UserMultiAccounts")
                        .HasForeignKey("UserAccountDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
