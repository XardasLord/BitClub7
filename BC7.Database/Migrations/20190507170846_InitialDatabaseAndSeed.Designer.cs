// <auto-generated />
using System;
using BC7.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BC7.Database.Migrations
{
    [DbContext(typeof(BitClub7Context))]
    [Migration("20190507170846_InitialDatabaseAndSeed")]
    partial class InitialDatabaseAndSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BC7.Domain.MatrixPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("DepthLevel");

                    b.Property<int>("Left");

                    b.Property<int>("MatrixLevel");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("Right");

                    b.Property<Guid?>("UserMultiAccountId");

                    b.HasKey("Id");

                    b.HasIndex("UserMultiAccountId");

                    b.ToTable("MatrixPositions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30d1fa80-ec36-40ea-8294-4aff3908d6e3"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(3992),
                            DepthLevel = 0,
                            Left = 1,
                            MatrixLevel = 0,
                            Right = 14,
                            UserMultiAccountId = new Guid("1c70cd91-91b9-426d-86be-55a2b5e95d55")
                        },
                        new
                        {
                            Id = new Guid("ac0d3b05-11a0-438a-a4f3-9efca4f843df"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(4873),
                            DepthLevel = 1,
                            Left = 2,
                            MatrixLevel = 0,
                            ParentId = new Guid("30d1fa80-ec36-40ea-8294-4aff3908d6e3"),
                            Right = 7,
                            UserMultiAccountId = new Guid("a13f108e-2ce8-4ff0-a80b-ba1f9c0b424b")
                        },
                        new
                        {
                            Id = new Guid("a3f3169a-3e6e-4558-a7da-99829c974fb3"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(4885),
                            DepthLevel = 1,
                            Left = 8,
                            MatrixLevel = 0,
                            ParentId = new Guid("30d1fa80-ec36-40ea-8294-4aff3908d6e3"),
                            Right = 13,
                            UserMultiAccountId = new Guid("d2c3d95e-9d0e-4420-b120-0c2b412a406a")
                        },
                        new
                        {
                            Id = new Guid("0576e73b-d29a-4ec8-8b46-cb80a5c1d6a8"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(4887),
                            DepthLevel = 2,
                            Left = 3,
                            MatrixLevel = 0,
                            ParentId = new Guid("ac0d3b05-11a0-438a-a4f3-9efca4f843df"),
                            Right = 4
                        },
                        new
                        {
                            Id = new Guid("70502fd0-bf66-4455-984a-951b12aae788"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(4887),
                            DepthLevel = 2,
                            Left = 5,
                            MatrixLevel = 0,
                            ParentId = new Guid("ac0d3b05-11a0-438a-a4f3-9efca4f843df"),
                            Right = 6
                        },
                        new
                        {
                            Id = new Guid("21593e16-ea25-44a0-b0c4-e4236d8f62c6"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(4934),
                            DepthLevel = 2,
                            Left = 9,
                            MatrixLevel = 0,
                            ParentId = new Guid("a3f3169a-3e6e-4558-a7da-99829c974fb3"),
                            Right = 10
                        },
                        new
                        {
                            Id = new Guid("b8d6f888-13c8-4109-95aa-83ce4dce4499"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 570, DateTimeKind.Utc).AddTicks(4937),
                            DepthLevel = 2,
                            Left = 11,
                            MatrixLevel = 0,
                            ParentId = new Guid("a3f3169a-3e6e-4558-a7da-99829c974fb3"),
                            Right = 12
                        });
                });

            modelBuilder.Entity("BC7.Domain.PaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountToPay")
                        .HasColumnType("decimal(18,6)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("OrderId");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,6)");

                    b.Property<string>("PaymentFor")
                        .IsRequired();

                    b.Property<Guid>("PaymentId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("BC7.Domain.UserAccountData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BtcWalletAddress")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Hash")
                        .IsRequired();

                    b.Property<bool>("IsMembershipFeePaid");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("UserAccountsData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("228673ef-51ec-4b82-a1a1-76ea020a84be"),
                            BtcWalletAddress = "BtcWalletAddressRoot1",
                            City = "CityRoot1",
                            Country = "CountryRoot1",
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 568, DateTimeKind.Utc).AddTicks(3137),
                            Email = "EmailRoot1",
                            FirstName = "FirstNameRoot1",
                            Hash = "hash1",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot1",
                            Login = "LoginRoot1",
                            Role = "Root",
                            Salt = "salt1",
                            Street = "StreetRoot1",
                            ZipCode = "ZipCodeRoot1"
                        },
                        new
                        {
                            Id = new Guid("813c380c-8c3b-473e-9a50-c20fd0042822"),
                            BtcWalletAddress = "BtcWalletAddressRoot2",
                            City = "CityRoot2",
                            Country = "CountryRoot2",
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 568, DateTimeKind.Utc).AddTicks(4296),
                            Email = "EmailRoot2",
                            FirstName = "FirstNameRoot2",
                            Hash = "hash2",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot2",
                            Login = "LoginRoot2",
                            Role = "Root",
                            Salt = "salt2",
                            Street = "StreetRoot2",
                            ZipCode = "ZipCodeRoot2"
                        },
                        new
                        {
                            Id = new Guid("bff1a558-f396-4516-a950-1df026c4ec0e"),
                            BtcWalletAddress = "BtcWalletAddressRoot3",
                            City = "CityRoot3",
                            Country = "CountryRoot3",
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 568, DateTimeKind.Utc).AddTicks(4310),
                            Email = "EmailRoot3",
                            FirstName = "FirstNameRoot3",
                            Hash = "hash3",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot3",
                            Login = "LoginRoot3",
                            Role = "Root",
                            Salt = "salt3",
                            Street = "StreetRoot3",
                            ZipCode = "ZipCodeRoot3"
                        });
                });

            modelBuilder.Entity("BC7.Domain.UserMultiAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsMainAccount");

                    b.Property<string>("MultiAccountName");

                    b.Property<string>("RefLink");

                    b.Property<Guid?>("SponsorId");

                    b.Property<Guid>("UserAccountDataId");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UserAccountDataId");

                    b.ToTable("UserMultiAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c70cd91-91b9-426d-86be-55a2b5e95d55"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 569, DateTimeKind.Utc).AddTicks(3310),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot1",
                            RefLink = "111111",
                            UserAccountDataId = new Guid("228673ef-51ec-4b82-a1a1-76ea020a84be")
                        },
                        new
                        {
                            Id = new Guid("a13f108e-2ce8-4ff0-a80b-ba1f9c0b424b"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 569, DateTimeKind.Utc).AddTicks(6976),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot2",
                            RefLink = "222222",
                            UserAccountDataId = new Guid("813c380c-8c3b-473e-9a50-c20fd0042822")
                        },
                        new
                        {
                            Id = new Guid("d2c3d95e-9d0e-4420-b120-0c2b412a406a"),
                            CreatedAt = new DateTime(2019, 5, 7, 17, 8, 46, 569, DateTimeKind.Utc).AddTicks(6997),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot3",
                            RefLink = "333333",
                            UserAccountDataId = new Guid("bff1a558-f396-4516-a950-1df026c4ec0e")
                        });
                });

            modelBuilder.Entity("BC7.Domain.MatrixPosition", b =>
                {
                    b.HasOne("BC7.Domain.UserMultiAccount")
                        .WithMany("MatrixPositions")
                        .HasForeignKey("UserMultiAccountId");
                });

            modelBuilder.Entity("BC7.Domain.UserMultiAccount", b =>
                {
                    b.HasOne("BC7.Domain.UserMultiAccount", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId");

                    b.HasOne("BC7.Domain.UserAccountData", "UserAccountData")
                        .WithMany("UserMultiAccounts")
                        .HasForeignKey("UserAccountDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
