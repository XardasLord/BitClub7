// <auto-generated />
using System;
using BC7.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BC7.Database.Migrations
{
    [DbContext(typeof(BitClub7Context))]
    partial class BitClub7ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BC7.Domain.MatrixPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<int>("DepthLevel");

                    b.Property<int>("Left");

                    b.Property<int>("MatrixLevel");

                    b.Property<Guid?>("ParentId");

                    b.Property<int>("Right");

                    b.Property<Guid?>("UserMultiAccountId");

                    b.HasKey("Id");

                    b.HasIndex("UserMultiAccountId");

                    b.ToTable("MatrixPositions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23eb9ca7-8861-4ddd-a332-f611eb7ddb29"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(8135),
                            DepthLevel = 0,
                            Left = 1,
                            MatrixLevel = 0,
                            Right = 14,
                            UserMultiAccountId = new Guid("91e63abf-2417-45d8-b570-1aa06b3d2fcd")
                        },
                        new
                        {
                            Id = new Guid("73ab5d25-0cd5-4e59-90b2-9235d93539cc"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(9015),
                            DepthLevel = 1,
                            Left = 2,
                            MatrixLevel = 0,
                            ParentId = new Guid("23eb9ca7-8861-4ddd-a332-f611eb7ddb29"),
                            Right = 7,
                            UserMultiAccountId = new Guid("779083e7-83bf-4202-9748-55f21d2c83a8")
                        },
                        new
                        {
                            Id = new Guid("555377bd-2bc7-4e85-b7a9-8f921ac60fb2"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(9027),
                            DepthLevel = 1,
                            Left = 8,
                            MatrixLevel = 0,
                            ParentId = new Guid("23eb9ca7-8861-4ddd-a332-f611eb7ddb29"),
                            Right = 13,
                            UserMultiAccountId = new Guid("35476f62-4d2c-4aa6-b449-6d422d14001b")
                        },
                        new
                        {
                            Id = new Guid("94c88148-bed4-4e3a-98ef-66568517140b"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(9027),
                            DepthLevel = 2,
                            Left = 3,
                            MatrixLevel = 0,
                            ParentId = new Guid("73ab5d25-0cd5-4e59-90b2-9235d93539cc"),
                            Right = 4
                        },
                        new
                        {
                            Id = new Guid("d8dbe897-7f0a-44e7-ab05-4a37b7c688bc"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(9030),
                            DepthLevel = 2,
                            Left = 5,
                            MatrixLevel = 0,
                            ParentId = new Guid("73ab5d25-0cd5-4e59-90b2-9235d93539cc"),
                            Right = 6
                        },
                        new
                        {
                            Id = new Guid("650fa797-cc7d-4e02-bd4f-441723a9371e"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(9042),
                            DepthLevel = 2,
                            Left = 9,
                            MatrixLevel = 0,
                            ParentId = new Guid("555377bd-2bc7-4e85-b7a9-8f921ac60fb2"),
                            Right = 10
                        },
                        new
                        {
                            Id = new Guid("f340082f-f501-4b51-b1db-60059d42dedf"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(9042),
                            DepthLevel = 2,
                            Left = 11,
                            MatrixLevel = 0,
                            ParentId = new Guid("555377bd-2bc7-4e85-b7a9-8f921ac60fb2"),
                            Right = 12
                        });
                });

            modelBuilder.Entity("BC7.Domain.PaymentHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountToPay");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("OrderId");

                    b.Property<double>("PaidAmount");

                    b.Property<Guid>("PaymentId");

                    b.Property<string>("Status")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("PaymentHistories");
                });

            modelBuilder.Entity("BC7.Domain.UserAccountData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BtcWalletAddress")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("Country")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Hash")
                        .IsRequired();

                    b.Property<bool>("IsMembershipFeePaid");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<string>("Login")
                        .IsRequired();

                    b.Property<string>("Role")
                        .IsRequired();

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<string>("Street")
                        .IsRequired();

                    b.Property<string>("ZipCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("UserAccountsData");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40390b5a-be5a-49f9-8b8e-1d77903f5f89"),
                            BtcWalletAddress = "BtcWalletAddressRoot1",
                            City = "CityRoot1",
                            Country = "CountryRoot1",
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 457, DateTimeKind.Utc).AddTicks(3161),
                            Email = "EmailRoot1",
                            FirstName = "FirstNameRoot1",
                            Hash = "hash1",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot1",
                            Login = "LoginRoot1",
                            Role = "Root",
                            Salt = "salt1",
                            Street = "StreetRoot1",
                            ZipCode = "ZipCodeRoot1"
                        },
                        new
                        {
                            Id = new Guid("1d1d72f6-4f6e-4e87-872a-66042b0d17e5"),
                            BtcWalletAddress = "BtcWalletAddressRoot2",
                            City = "CityRoot2",
                            Country = "CountryRoot2",
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 457, DateTimeKind.Utc).AddTicks(4431),
                            Email = "EmailRoot2",
                            FirstName = "FirstNameRoot2",
                            Hash = "hash2",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot2",
                            Login = "LoginRoot2",
                            Role = "Root",
                            Salt = "salt2",
                            Street = "StreetRoot2",
                            ZipCode = "ZipCodeRoot2"
                        },
                        new
                        {
                            Id = new Guid("38e6fba6-23c5-410e-a478-010e9a253cfc"),
                            BtcWalletAddress = "BtcWalletAddressRoot3",
                            City = "CityRoot3",
                            Country = "CountryRoot3",
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 457, DateTimeKind.Utc).AddTicks(4443),
                            Email = "EmailRoot3",
                            FirstName = "FirstNameRoot3",
                            Hash = "hash3",
                            IsMembershipFeePaid = true,
                            LastName = "LastNameRoot3",
                            Login = "LoginRoot3",
                            Role = "Root",
                            Salt = "salt3",
                            Street = "StreetRoot3",
                            ZipCode = "ZipCodeRoot3"
                        });
                });

            modelBuilder.Entity("BC7.Domain.UserMultiAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("IsMainAccount");

                    b.Property<string>("MultiAccountName");

                    b.Property<string>("RefLink");

                    b.Property<Guid?>("SponsorId");

                    b.Property<Guid>("UserAccountDataId");

                    b.HasKey("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UserAccountDataId");

                    b.ToTable("UserMultiAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("91e63abf-2417-45d8-b570-1aa06b3d2fcd"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 458, DateTimeKind.Utc).AddTicks(4847),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot1",
                            RefLink = "111111",
                            UserAccountDataId = new Guid("40390b5a-be5a-49f9-8b8e-1d77903f5f89")
                        },
                        new
                        {
                            Id = new Guid("779083e7-83bf-4202-9748-55f21d2c83a8"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(311),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot2",
                            RefLink = "222222",
                            UserAccountDataId = new Guid("1d1d72f6-4f6e-4e87-872a-66042b0d17e5")
                        },
                        new
                        {
                            Id = new Guid("35476f62-4d2c-4aa6-b449-6d422d14001b"),
                            CreatedAt = new DateTime(2019, 4, 24, 17, 51, 8, 459, DateTimeKind.Utc).AddTicks(332),
                            IsMainAccount = true,
                            MultiAccountName = "LoginRoot3",
                            RefLink = "333333",
                            UserAccountDataId = new Guid("38e6fba6-23c5-410e-a478-010e9a253cfc")
                        });
                });

            modelBuilder.Entity("BC7.Domain.MatrixPosition", b =>
                {
                    b.HasOne("BC7.Domain.UserMultiAccount")
                        .WithMany("MatrixPositions")
                        .HasForeignKey("UserMultiAccountId");
                });

            modelBuilder.Entity("BC7.Domain.UserMultiAccount", b =>
                {
                    b.HasOne("BC7.Domain.UserMultiAccount", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId");

                    b.HasOne("BC7.Domain.UserAccountData", "UserAccountData")
                        .WithMany("UserMultiAccounts")
                        .HasForeignKey("UserAccountDataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
